services:
  policy-check-job:
    build:
      context: ..
      dockerfile: Dockerfile
    container_name: car-insurance-policy-check-job
    depends_on:
      db:
        condition: service_healthy
      migrate:
        condition: service_completed_successfully
      app:
        condition: service_healthy
    env_file:
      - ../.env.production
    working_dir: /app
    volumes:
      - ../logs/prod:/app/logs/prod
      - pgdata:/app/data/pg
    command: python jobs/policy_check.py
  superadmin:
    build:
      context: ..
      dockerfile: Dockerfile
    container_name: car-insurance-superadmin
    depends_on:
      db:
        condition: service_healthy
      migrate:
        condition: service_completed_successfully
    env_file:
      - ../.env.production
    working_dir: /app
    command: python scripts/create_superadmin.py
  db:
    image: postgres:16
    container_name: car-insurance-postgres
    env_file:
      - ../.env.production
    volumes:
      - pgdata:/app/data/pg
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U \"$${POSTGRES_USER}\" -d \"$${POSTGRES_DB}\""]
      interval: 5s
      timeout: 3s
      retries: 20

  migrate:
    build:
      context: ..
      dockerfile: Dockerfile
    container_name: car-insurance-migrate
    depends_on:
      db:
        condition: service_healthy
    env_file:
      - ../.env.production
    volumes:
      - ../logs/prod:/app/logs
    working_dir: /app
    command: alembic -c /app/alembic.ini upgrade head

  app:
    build:
      context: ..
      dockerfile: Dockerfile
    container_name: car-insurance-app
    restart: always
    depends_on:
      db:
        condition: service_healthy
      migrate:
        condition: service_completed_successfully
      superadmin:
        condition: service_completed_successfully
    env_file:
      - ../.env.production
    volumes:
        - ../logs/prod:/app/logs/prod
        - ../app:/app/app
        - ../alembic:/app/alembic
        - ../alembic.ini:/app/alembic.ini
    working_dir: /app
    command: sh -c "uvicorn app.main:app --host 0.0.0.0 --port ${PORT:-8000}"
    ports:
      - "${PORT:-8000}:8000"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 10s
      timeout: 3s
      retries: 5

volumes:
  pgdata:
